/*
 * Copyright (C) 2015-2016 kcotugno
 * All rights reserved
 *
 * Distributed under the terms of the BSD 2 Clause software license. See the
 * accompanying LICENSE file or http://www.opensource.org/licenses/BSD-2-Clause.
 *
 * Author: kcotugno
 * Date: 2/23/2016
 */

using System;
using System.Collections.Generic;
using System.IO;
using OpenARLog.Data;

namespace OpenARLog.ADIF
{
    public class ADIWriter
    {

        public string ADIF_VERSION { get; private set; }

        #region Private Members

        private static string _ADIF_VER = "3.0.4";

        private static string _LIBRARY_COMMENT = "Generated by OpenARLog.ADIF written by kcotugno.\nPlease see https://github.com/kcotugno/OpenARLog for more information.";

        private ADIFHeader _header;

        private string _filePath;
        private StreamWriter _streamer;

        private bool fileexists = false;

        #endregion

        public ADIWriter()
        {
            _filePath = string.Empty;
            Initialize();
        }

        public ADIWriter(string filepath, bool append)
        {
            Initialize();

            Open(filepath, append);
        }

        public ADIWriter(string filepath, bool append, ADIFHeader header)
        {
            Initialize();

            Open(filepath, append);

            _header = header;
            
            // This library only writes one version, so we need to change the header just in case.
            _header.Version = _ADIF_VER;
        }

        private void Initialize()
        {
            ADIF_VERSION = _ADIF_VER;

            _header = new ADIFHeader();

            _header.ProgramId = string.Empty;
            _header.ProgramVersion = string.Empty;
            _header.TimeStamp = null;
            _header.Version = _ADIF_VER;
            _header.InitialComment = string.Empty;

            _streamer = null;
        }

        #region Public Functions

        public bool DidFilePreexist()
        {
            return fileexists;
        }

        public void SetHeader(ADIFHeader header)
        {
            _header = header;

            // This library only writes one version, so we need to change the header just in case.
            _header.Version = _ADIF_VER;
        }

        public void Open(string filepath, bool append)
        {
            fileexists = File.Exists(filepath);

            try
            {
                _streamer = new StreamWriter(filepath, append, System.Text.Encoding.UTF8);
                _filePath = filepath;

            }
            catch
            {
                // TODO
            }
        }

        public void Close()
        {
            _streamer.Close();
        }

        public void WriteHeader()
        {
            // This inital comment is left to the program author to produce.
            // Example:
            // Generated by OpenARLog written by kcotugno
            //  on 3-29-2016 22:05.
            _streamer.Write(_header.InitialComment);

            // Standarded comment placed in all file by this library.
            _streamer.WriteLine();
            _streamer.WriteLine();
            _streamer.Write(_LIBRARY_COMMENT);

            _streamer.WriteLine();
            _streamer.WriteLine();

            _streamer.WriteLine(string.Format("<ADIF_VER:{0}>{1}", ADIF_VERSION.Length, ADIF_VERSION));

            if (!(_header.ProgramId == string.Empty))
                _streamer.WriteLine(string.Format("<PROGRAMID:{0}>{1}", _header.ProgramId.Length, _header.ProgramId));

            if (!(_header.ProgramVersion == string.Empty))
                _streamer.WriteLine(string.Format("<PROGRAMVERSION:{0}>{1}", _header.ProgramVersion.Length, _header.ProgramVersion));

            if (_header.TimeStamp == null)
            {
                _streamer.WriteLine(string.Format("<CREATED_TIMESTAMP:15>{0}", DateTime.Now.ToString("yyyyMMdd HHmmss")));
            } else
            {
                _streamer.WriteLine(string.Format("<CREATED_TIMESTAMP:15>{0}", _header.TimeStamp.Value.ToString("yyyyMMdd HHmmss")));
            }
            

            _streamer.WriteLine("<EOH>");
            _streamer.WriteLine();
            _streamer.WriteLine();
        }

        public void WriteQSO(QSO qso)
        {

            // TODO Remove the null check. After the QSO class is updated to initialize its string properties to empty we will not have to do the double check.

            // Operator info.
            if (!(qso.Callsign == string.Empty))
                _streamer.WriteLine(string.Format("<CALL:{0}>{1}", qso.Callsign.Length, qso.Callsign));

            if (!(qso.Name == string.Empty))
                _streamer.WriteLine(string.Format("<NAME:{0}>{1}", qso.Name.Length, qso.Name));

            // Location info.
            if (!(qso.Country == string.Empty))
                _streamer.WriteLine(string.Format("<COUNTRY:{0}>{1}", qso.Country.Length, qso.Country));

            if (!(qso.State == string.Empty))
                _streamer.WriteLine(string.Format("<STATE:{0}>{1}", qso.State.Length, qso.State));

            if (!(qso.County == string.Empty))
                _streamer.WriteLine(string.Format("<CNTY:{0}>{1}", qso.County.Length, qso.County));

            if (!(qso.City == string.Empty))
                _streamer.WriteLine(string.Format("<QTH:{0}>{1}", qso.City.Length, qso.City));

            if (!(qso.GridSquare == string.Empty))
                _streamer.WriteLine(string.Format("<GRIDSQUARE:{0}>{1}", qso.GridSquare.Length, qso.GridSquare));

            // Operation info.
            if (!(qso.Frequency == string.Empty))
                _streamer.WriteLine(string.Format("<FREQ:{0}>{1}", qso.Frequency.Length, qso.Frequency));

            if (!(qso.Band == string.Empty))
                _streamer.WriteLine(string.Format("<BAND:{0}>{1}", qso.Band.Length, qso.Band));

            if (!(qso.Mode == string.Empty))
                _streamer.WriteLine(string.Format("<MODE:{0}>{1}", qso.Mode.Length, qso.Mode));

            if (!(qso.DateTimeOn == null))
            {
                _streamer.WriteLine(string.Format("<TIME_ON:6>{0}", qso.DateTimeOn.Value.ToUniversalTime().ToString("HHmmss")));
                _streamer.WriteLine(string.Format("<QSO_DATE:8>{0}", qso.DateTimeOn.Value.ToUniversalTime().ToString("yyyyMMdd")));
            }

            if (!(qso.DateTimeOff == null))
            {
                _streamer.WriteLine(string.Format("<TIME_OFF:6>{0}", qso.DateTimeOff.Value.ToUniversalTime().ToString("HHmmss")));
                _streamer.WriteLine(string.Format("<QSO_DATE_OFF:8>{0}", qso.DateTimeOff.Value.ToUniversalTime().ToString("yyyyMMdd")));
            }

            if (!(qso.Operator == string.Empty))
                _streamer.WriteLine(string.Format("<OPERATOR:{0}>{1}", qso.Operator.Length, qso.Operator));

            if (!(qso.My_Name == string.Empty))
                _streamer.WriteLine(string.Format("<MY_NAME:{0}>{1}", qso.My_Name.Length, qso.My_Name));

            if (!(qso.My_Country == string.Empty))
                _streamer.WriteLine(string.Format("<MY_COUNTRY:{0}>{1}", qso.My_Country.Length, qso.My_Country));

            if (!(qso.My_State == string.Empty))
                _streamer.WriteLine(string.Format("<MY_STATE:{0}>{1}", qso.State.Length, qso.My_State));

            if (!(qso.My_County == string.Empty))
                _streamer.WriteLine(string.Format("<MY_CNTY:{0}>{1}", qso.My_County.Length, qso.My_County));

            if (!(qso.My_City == string.Empty))
                _streamer.WriteLine(string.Format("<MY_CITY:{0}>{1}", qso.My_City.Length, qso.My_City));

            if (!(qso.My_GridSquare == string.Empty))
                _streamer.WriteLine(string.Format("<MY_GRIDSQUARE:{0}>{1}", qso.My_GridSquare.Length, qso.My_GridSquare));

            // TODO Add the rest of the fields.

            _streamer.WriteLine("<EOR>");
            _streamer.WriteLine();
        }

        public void WriteQSOList(List<QSO> qsos)
        {
            qsos.ForEach(x => WriteQSO(x));
        }

        #endregion
    }
}
